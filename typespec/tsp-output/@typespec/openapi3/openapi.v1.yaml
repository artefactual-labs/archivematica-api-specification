openapi: 3.0.0
info:
  title: Archivematica
  version: v1
tags: []
paths:
  /api/administration/dips/atom/fetch_levels:
    get:
      operationId: Administration_fetchLevelsOfDescription
      description: Fetches all levels of description from an AtoM datatabase, replacing any previously existing.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/uuid'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - error
                properties:
                  success:
                    type: boolean
                    default: false
                  error:
                    type: string
                description: ''
  /api/filesystem/administration/dips/atom/levels:
    get:
      operationId: Filesystem_listLevelsOfDescription
      description: List all levels of description configured.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/uuid'
  /api/filesystem/metadata:
    get:
      operationId: Filesystem_readMetadata
      description: Read metadata for a path (currently only level of description).
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  level_of_description:
                    type: string
                required:
                  - level_of_description
        '404':
          description: The server cannot find the requested resource.
    post:
      operationId: Filesystem_updateMetadata
      description: Update metadata for a path (currently only level of descrption).
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          description: The server cannot find the requested resource.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                path:
                  type: string
                level_of_description:
                  type: string
              required:
                - path
                - level_of_description
  /api/ingest/completed:
    get:
      operationId: Ingest_listCompleted
      description: List completed SIPs.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - message
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/uuid'
                  message:
                    type: string
                description: ''
  /api/ingest/copy_metadata_files:
    post:
      operationId: Ingest_copyMetadataFiles
      description: Add metadata files to a SIP.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  error:
                    type: boolean
                    default: false
                  message:
                    type: string
                description: ''
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                sip_uuid:
                  $ref: '#/components/schemas/uuid'
                paths:
                  type: array
                  items:
                    type: string
              required:
                - sip_uuid
                - paths
  /api/ingest/delete:
    delete:
      operationId: Ingest_deleteAll
      description: Mark all completed SIPs as hidden.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Removed'
        '400':
          description: The server could not understand the request due to invalid syntax.
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotRemoved'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotRemoved'
  /api/ingest/reingest:
    post:
      operationId: Ingest_reingest
      description: Approve re-ingest of an AIP to the beginning of ingest.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1.Ingest.ReingestResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                uuid:
                  $ref: '#/components/schemas/uuid'
              required:
                - name
                - uuid
  /api/ingest/reingest/approve:
    post:
      operationId: Ingest_approveReingest
      description: Approve an AIP partial re-ingest.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  error:
                    type: boolean
                    default: false
                  message:
                    type: string
                description: ''
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                uuid:
                  $ref: '#/components/schemas/uuid'
              required:
                - uuid
  /api/ingest/status/{id}:
    get:
      operationId: Ingest_read
      description: Read the status of a SIP.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1.Ingest.ReadResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
  /api/ingest/waiting:
    get:
      operationId: Ingest_listWaiting
      description: List SIPs waiting for user input..
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - message
                properties:
                  results:
                    type: array
                    items:
                      type: number
                      enum:
                        - 200
                  message:
                    type: string
                description: ''
  /api/ingest/{id}/delete:
    post:
      operationId: Ingest_delete
      description: Mark a SIP as hidden and hide in the dashboard.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Removed'
        '400':
          description: The server could not understand the request due to invalid syntax.
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotRemoved'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotRemoved'
  /api/processing-configuration:
    get:
      operationId: ProcessingConfiguration_list
      description: Lists known processing configurations.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/processing-configuration/{name}:
    get:
      operationId: ProcessingConfiguration_read
      description: Returns the processing configuration with the given name.
      parameters:
        - name: accept
          in: header
          required: true
          schema:
            type: string
            enum:
              - '*/*'
              - application/xml
              - text/xml
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            text/xml:
              schema:
                type: string
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - error
                properties:
                  success:
                    type: boolean
                    default: false
                  error:
                    type: string
                description: ''
        '415':
          description: Client error
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - error
                properties:
                  success:
                    type: boolean
                    default: false
                  error:
                    type: string
                description: ''
    delete:
      operationId: ProcessingConfiguration_delete
      description: Deletes the processing configuration with the given name.
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - error
                properties:
                  success:
                    type: boolean
                    default: false
                  error:
                    type: string
                description: ''
  /api/transfer/approve:
    post:
      operationId: Transfer_approve
      description: Approve a transfer.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1.Transfer.ApproveTransferResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                directory:
                  type: string
                  description: Directory the transfer is in currently.
                type:
                  allOf:
                    - $ref: '#/components/schemas/TransferType'
                  description: Type of the transfer.
              required:
                - directory
                - type
  /api/transfer/completed:
    get:
      operationId: Transfer_listCompleted
      description: List completed transfers.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - message
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/uuid'
                  message:
                    type: string
                description: ''
  /api/transfer/delete:
    delete:
      operationId: Transfer_deleteAll
      description: Mark all completed transfers as hidden.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Removed'
        '400':
          description: The server could not understand the request due to invalid syntax.
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotRemoved'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotRemoved'
  /api/transfer/reingest:
    post:
      operationId: Transfer_reingest
      description: Approve re-ingest of an AIP to the beginning of transfer.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1.Transfer.ReingestResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                uuid:
                  $ref: '#/components/schemas/uuid'
              required:
                - name
                - uuid
  /api/transfer/start_transfer:
    post:
      operationId: Transfer_start
      description: Start a new transfer.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1.Transfer.StartTransferResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the transfer.
                type:
                  allOf:
                    - $ref: '#/components/schemas/TransferType'
                  description: Type of the transfer.
                accession:
                  type: string
                  description: Accession number.
                access_id:
                  type: string
                  description: Access system ID.
                paths:
                  type: array
                  items:
                    type: string
                  description: List of base64-encoded <location_uuid>:<relative_path> to be copied into the new transfer. Location UUIDs should be associated with this pipeline, and relative path should be relative to the location.
                row_ids:
                  type: array
                  items:
                    type: string
                  description: ID of the associated TransferMetadataSet for disk image ingest.
              required:
                - name
                - type
                - accession
                - access_id
                - paths
                - row_ids
  /api/transfer/status/{id}:
    get:
      operationId: Transfer_read
      description: Read the status of a transfer.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1.Transfer.ReadResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
  /api/transfer/unapproved:
    get:
      operationId: Transfer_listUnapproved
      description: List unapproved transfers.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - message
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/V1.Transfer.Unapproved'
                  message:
                    type: string
                description: ''
  /api/transfer/{id}/delete:
    post:
      operationId: Transfer_delete
      description: Mark a transfer as hidden and hide in the dashboard.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Removed'
        '400':
          description: The server could not understand the request due to invalid syntax.
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotRemoved'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotRemoved'
  /api/v2beta/jobs/{id}:
    get:
      operationId: Jobs_list
      description: Return a list of jobs for the given package.
      parameters:
        - name: id
          in: path
          required: true
          description: Package ID
          schema:
            $ref: '#/components/schemas/uuid'
        - name: microservice
          in: query
          required: false
          description: Name of the microservice the jobs belong to.
          schema:
            type: string
        - name: link_uuid
          in: query
          required: true
          description: UUID of the job chain link.
          schema:
            $ref: '#/components/schemas/uuid'
        - name: name
          in: query
          required: false
          description: Name of the job.
          schema:
            type: string
        - name: detailed
          in: query
          required: false
          description: Include the task properties provided by the task endpoint.
          schema:
            type: boolean
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/V2Beta.Jobs.Job'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
  /api/v2beta/package:
    post:
      operationId: Packages_create
      description: Starts a new transfer.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2Beta.Packages.CreatePackageResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2Beta.Packages.CreatePackageRequest'
  /api/v2beta/task/{id}:
    get:
      operationId: Tasks_read
      description: Return information about a task.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2Beta.Tasks.Task'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
  /api/v2beta/validate/{validator}:
    post:
      operationId: Validate_create
      description: |-
        Validate CSVs against embedded sets of rules.

        The status value may be one of:
        - `ok`: the submitted document is valid.
        - `bad request`: the submitted document is invalid.
      parameters:
        - name: validator
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/V2Beta.Validate.Validator'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2Beta.Validate.ValidDocumentResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/V2Beta.Validate.InvalidDocumentResponse'
                  - $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        content:
          text/csv; charset=utf-8:
            schema:
              type: string
              format: binary
security:
  - ApiKeyAuth: []
components:
  schemas:
    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: boolean
          default: true
        message:
          type: string
    NotRemoved:
      type: object
      required:
        - removed
      properties:
        removed:
          type: boolean
          default: false
    Removed:
      type: object
      required:
        - removed
      properties:
        removed:
          type: boolean
          default: true
      description: ''
    Success:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          default: true
    TransferType:
      type: string
      enum:
        - standard
        - zipfile
        - unzipped bag
        - zipped bag
        - dspace
        - maildir
        - TRIM
        - dataverse
    UnitStatus:
      type: string
      enum:
        - USER_INPUT
        - FAILED
        - REJECTED
        - COMPLETE
        - PROCESSING
    V1.Ingest.ReadResponse:
      type: object
      required:
        - type
        - directory
        - name
        - uuid
        - microservice
        - status
      properties:
        type:
          type: string
          enum:
            - SIP
        directory:
          type: string
        name:
          type: string
        uuid:
          $ref: '#/components/schemas/uuid'
        microservice:
          type: string
        status:
          $ref: '#/components/schemas/UnitStatus'
        sip_uuid:
          anyOf:
            - $ref: '#/components/schemas/uuid'
            - type: string
              enum:
                - BACKLOG
      description: ''
    V1.Ingest.ReingestResponse:
      type: object
      required:
        - message
        - reingest_uuid
      properties:
        error:
          type: boolean
          default: false
        message:
          type: string
        reingest_uuid:
          $ref: '#/components/schemas/uuid'
      description: ''
    V1.Ingest.Waiting:
      type: object
      required:
        - sip_directory
        - sip_uuid
        - sip_name
        - microservice
      properties:
        sip_directory:
          type: string
        sip_uuid:
          $ref: '#/components/schemas/uuid'
        sip_name:
          type: string
        microservice:
          type: string
    V1.Transfer.ApproveTransferResponse:
      type: object
      required:
        - message
        - uuid
      properties:
        error:
          type: boolean
          default: false
        message:
          type: string
        uuid:
          $ref: '#/components/schemas/uuid'
      description: ''
    V1.Transfer.ReadResponse:
      type: object
      required:
        - type
        - directory
        - name
        - uuid
        - microservice
        - status
      properties:
        type:
          type: string
          enum:
            - transfer
        directory:
          type: string
        name:
          type: string
        uuid:
          $ref: '#/components/schemas/uuid'
        microservice:
          type: string
        status:
          $ref: '#/components/schemas/UnitStatus'
        sip_uuid:
          anyOf:
            - $ref: '#/components/schemas/uuid'
            - type: string
              enum:
                - BACKLOG
      description: ''
    V1.Transfer.ReingestResponse:
      type: object
      required:
        - message
        - reingest_uuid
      properties:
        error:
          type: boolean
          default: false
        message:
          type: string
        reingest_uuid:
          $ref: '#/components/schemas/uuid'
      description: ''
    V1.Transfer.StartTransferResponse:
      type: object
      required:
        - message
        - path
      properties:
        error:
          type: boolean
          default: false
        message:
          type: string
        path:
          type: string
      description: ''
    V1.Transfer.Unapproved:
      type: object
      required:
        - type
        - directory
        - uuid
      properties:
        type:
          $ref: '#/components/schemas/TransferType'
        directory:
          type: string
        uuid:
          $ref: '#/components/schemas/uuid'
    V2Beta.Jobs.Job:
      type: object
      required:
        - status
        - tasks
        - uuid
        - link_uuid
        - microservice
        - name
      properties:
        status:
          $ref: '#/components/schemas/V2Beta.Jobs.JobStatus'
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/V2Beta.Jobs.Task'
        uuid:
          $ref: '#/components/schemas/uuid'
        link_uuid:
          $ref: '#/components/schemas/uuid'
        microservice:
          type: string
        name:
          type: string
    V2Beta.Jobs.JobStatus:
      type: string
      enum:
        - UNKNOWN
        - USER_INPUT
        - COMPLETE
        - PROCESSING
        - FAILED
    V2Beta.Jobs.Task:
      type: object
      required:
        - uuid
        - exit_code
      properties:
        uuid:
          $ref: '#/components/schemas/uuid'
        exit_code:
          $ref: '#/components/schemas/exitCode'
    V2Beta.Packages.CreatePackageRequest:
      type: object
      required:
        - name
        - path
      properties:
        name:
          type: string
        path:
          type: string
        access_system_id:
          type: string
        accession:
          type: string
        auto_approve:
          type: boolean
        processing_config:
          type: string
        type:
          $ref: '#/components/schemas/TransferType'
    V2Beta.Packages.CreatePackageResponse:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/uuid'
    V2Beta.Tasks.Task:
      type: object
      required:
        - uuid
        - file_name
        - exit_code
        - time_created
        - time_ended
        - file_uuid
        - duration
        - time_started
      properties:
        uuid:
          $ref: '#/components/schemas/uuid'
        file_name:
          type: string
        exit_code:
          $ref: '#/components/schemas/exitCode'
        time_created:
          $ref: '#/components/schemas/timestamp'
        time_ended:
          $ref: '#/components/schemas/timestamp'
        file_uuid:
          $ref: '#/components/schemas/uuid'
        duration:
          type: string
          enum:
            - seconds
        time_started:
          $ref: '#/components/schemas/timestamp'
    V2Beta.Validate.InvalidDocumentResponse:
      type: object
      required:
        - valid
        - reason
      properties:
        valid:
          type: boolean
          default: false
        reason:
          type: string
          minLength: 1
    V2Beta.Validate.ValidDocumentResponse:
      type: object
      required:
        - valid
      properties:
        valid:
          type: boolean
          default: true
    V2Beta.Validate.Validator:
      type: string
      enum:
        - avalon
        - rights
    Versions:
      type: string
      enum:
        - v1
    exitCode:
      type: integer
      format: uint8
      description: 'POSIX-compatible exit code: 0 for success and any number from 1 to 255 for anything else.'
    timestamp:
      type: string
      description: 'E.g.: "2020-01-17T00:44:37".'
    uuid:
      type: string
      format: 'UUIDv4, e.g.: "e3bae040-7682-4457-aef8-20a419aed0bd".'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: ApiKey
