openapi: 3.0.0
info:
  title: Archivematica
  version: 0.0.0
tags: []
paths:
  /api/processing-configuration:
    get:
      operationId: ProcessingConfiguration_list
      description: Lists known processing configurations.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/processing-configuration/{name}:
    get:
      operationId: ProcessingConfiguration_read
      description: Returns the processing configuration with the given name.
      parameters:
        - name: accept
          in: header
          required: true
          schema:
            type: string
            enum:
              - '*/*'
              - application/xml
              - text/xml
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            text/xml:
              schema:
                type: string
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - error
                properties:
                  success:
                    type: boolean
                    default: false
                  error:
                    type: string
                description: ''
        '415':
          description: Client error
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - error
                properties:
                  success:
                    type: boolean
                    default: false
                  error:
                    type: string
                description: ''
    delete:
      operationId: ProcessingConfiguration_delete
      description: Deletes the processing configuration with the given name.
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - error
                properties:
                  success:
                    type: boolean
                    default: false
                  error:
                    type: string
                description: ''
  /api/v2beta/jobs/{id}:
    get:
      operationId: Jobs_list
      description: Return a list of jobs for the given package.
      parameters:
        - name: id
          in: path
          required: true
          description: Package ID
          schema:
            $ref: '#/components/schemas/uuid'
        - name: microservice
          in: query
          required: false
          description: Name of the microservice the jobs belong to.
          schema:
            type: string
        - name: link_uuid
          in: query
          required: true
          description: UUID of the job chain link.
          schema:
            $ref: '#/components/schemas/uuid'
        - name: name
          in: query
          required: false
          description: Name of the job.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/V2Beta.Jobs.Job'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
  /api/v2beta/package:
    post:
      operationId: Packages_create
      description: Starts a new transfer.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2Beta.Packages.CreatePackageResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2Beta.Packages.CreatePackageRequest'
  /api/v2beta/task/{id}:
    get:
      operationId: Tasks_read
      description: Return information about a task.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2Beta.Tasks.Task'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - message
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                description: ''
  /api/v2beta/validate/{validator}:
    post:
      operationId: Validate_create
      description: |-
        Validate CSVs against embedded sets of rules.

        The status value may be one of:
        - `ok`: the submitted document is valid.
        - `bad request`: the submitted document is invalid.
      parameters:
        - name: validator
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/V2Beta.Validate.Validator'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2Beta.Validate.ValidDocumentResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/V2Beta.Validate.InvalidDocumentResponse'
                  - $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        content:
          text/csv; charset=utf-8:
            schema:
              type: string
              format: binary
security:
  - ApiKeyAuth: []
components:
  schemas:
    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: boolean
          default: true
        message:
          type: string
    Success:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          default: true
    V2Beta.Jobs.Job:
      type: object
      required:
        - status
        - tasks
        - uuid
        - link_uuid
        - microservice
        - name
      properties:
        status:
          $ref: '#/components/schemas/V2Beta.Jobs.JobStatus'
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/V2Beta.Jobs.Task'
        uuid:
          $ref: '#/components/schemas/uuid'
        link_uuid:
          $ref: '#/components/schemas/uuid'
        microservice:
          type: string
        name:
          type: string
    V2Beta.Jobs.JobStatus:
      type: string
      enum:
        - UNKNOWN
        - USER_INPUT
        - COMPLETE
        - PROCESSING
        - FAILED
    V2Beta.Jobs.Task:
      type: object
      required:
        - uuid
        - exit_code
      properties:
        uuid:
          $ref: '#/components/schemas/uuid'
        exit_code:
          $ref: '#/components/schemas/exitCode'
    V2Beta.Packages.CreatePackageRequest:
      type: object
      required:
        - name
        - path
      properties:
        name:
          type: string
        path:
          type: string
        access_system_id:
          type: string
        accession:
          type: string
        auto_approve:
          type: boolean
        processing_config:
          type: string
        type:
          $ref: '#/components/schemas/V2Beta.Packages.TransferType'
    V2Beta.Packages.CreatePackageResponse:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/uuid'
    V2Beta.Packages.TransferType:
      type: string
      enum:
        - standard
        - zipfile
        - unzipped bag
        - zipped bag
        - dspace
        - maildir
        - TRIM
        - dataverse
    V2Beta.Tasks.Task:
      type: object
      required:
        - uuid
        - file_name
        - exit_code
        - time_created
        - time_ended
        - file_uuid
        - duration
        - time_started
      properties:
        uuid:
          $ref: '#/components/schemas/uuid'
        file_name:
          type: string
        exit_code:
          $ref: '#/components/schemas/exitCode'
        time_created:
          $ref: '#/components/schemas/timestamp'
        time_ended:
          $ref: '#/components/schemas/timestamp'
        file_uuid:
          $ref: '#/components/schemas/uuid'
        duration:
          type: string
          enum:
            - seconds
        time_started:
          $ref: '#/components/schemas/timestamp'
    V2Beta.Validate.InvalidDocumentResponse:
      type: object
      required:
        - valid
        - reason
      properties:
        valid:
          type: boolean
          default: false
        reason:
          type: string
          minLength: 1
    V2Beta.Validate.ValidDocumentResponse:
      type: object
      required:
        - valid
      properties:
        valid:
          type: boolean
          default: true
    V2Beta.Validate.Validator:
      type: string
      enum:
        - avalon
        - rights
    exitCode:
      type: integer
      format: uint8
      description: 'POSIX-compatible exit code: 0 for success and any number from 1 to 255 for anything else.'
    timestamp:
      type: string
      description: 'E.g.: "2020-01-17T00:44:37".'
    uuid:
      type: string
      format: 'UUIDv4, e.g.: "e3bae040-7682-4457-aef8-20a419aed0bd".'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: ApiKey
